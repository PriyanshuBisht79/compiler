
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocGTDIVIDE ELSE EQUALS GT ID IF INT LBRACE LPAREN MINUS NUMBER PLUS PRINT RBRACE RPAREN SEMICOLON TIMESprogram : statementsstatements : statement statementsstatements : statementstatement : INT ID EQUALS expression SEMICOLONstatement : IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEstatement : PRINT LPAREN expression RPAREN SEMICOLONexpression : expression PLUS term\n| expression MINUS termexpression : termterm : term TIMES factor\n| term DIVIDE factorterm : factorfactor : LPAREN expression RPARENfactor : NUMBERfactor : IDexpression : expression GT expression'
    
_lr_action_items = {'INT':([0,3,28,30,36,40,42,],[4,4,-4,4,-6,4,-5,]),'IF':([0,3,28,30,36,40,42,],[5,5,-4,5,-6,5,-5,]),'PRINT':([0,3,28,30,36,40,42,],[6,6,-4,6,-6,6,-5,]),'$end':([1,2,3,7,28,36,42,],[0,-1,-3,-2,-4,-6,-5,]),'RBRACE':([3,7,28,36,37,41,42,],[-3,-2,-4,-6,38,42,-5,]),'ID':([4,9,10,11,12,22,23,24,25,26,],[8,17,17,17,17,17,17,17,17,17,]),'LPAREN':([5,6,9,10,11,12,22,23,24,25,26,],[9,10,12,12,12,12,12,12,12,12,12,]),'EQUALS':([8,],[11,]),'NUMBER':([9,10,11,12,22,23,24,25,26,],[16,16,16,16,16,16,16,16,16,]),'RPAREN':([13,14,15,16,17,18,20,29,31,32,33,34,35,],[21,-9,-12,-14,-15,27,29,-13,-7,-8,-16,-10,-11,]),'PLUS':([13,14,15,16,17,18,19,20,29,31,32,33,34,35,],[22,-9,-12,-14,-15,22,22,22,-13,-7,-8,-16,-10,-11,]),'MINUS':([13,14,15,16,17,18,19,20,29,31,32,33,34,35,],[23,-9,-12,-14,-15,23,23,23,-13,-7,-8,-16,-10,-11,]),'GT':([13,14,15,16,17,18,19,20,29,31,32,33,34,35,],[24,-9,-12,-14,-15,24,24,24,-13,-7,-8,None,-10,-11,]),'SEMICOLON':([14,15,16,17,19,27,29,31,32,33,34,35,],[-9,-12,-14,-15,28,36,-13,-7,-8,-16,-10,-11,]),'TIMES':([14,15,16,17,29,31,32,34,35,],[25,-12,-14,-15,-13,25,25,-10,-11,]),'DIVIDE':([14,15,16,17,29,31,32,34,35,],[26,-12,-14,-15,-13,26,26,-10,-11,]),'LBRACE':([21,39,],[30,40,]),'ELSE':([38,],[39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,3,30,40,],[2,7,37,41,]),'statement':([0,3,30,40,],[3,3,3,3,]),'expression':([9,10,11,12,24,],[13,18,19,20,33,]),'term':([9,10,11,12,22,23,24,],[14,14,14,14,31,32,14,]),'factor':([9,10,11,12,22,23,24,25,26,],[15,15,15,15,15,15,15,34,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',20),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',24),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',28),
  ('statement -> INT ID EQUALS expression SEMICOLON','statement',5,'p_statement_decl','parser.py',32),
  ('statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','statement',11,'p_statement_if','parser.py',36),
  ('statement -> PRINT LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_print','parser.py',40),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','parser.py',44),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','parser.py',45),
  ('expression -> term','expression',1,'p_expression_term','parser.py',49),
  ('term -> term TIMES factor','term',3,'p_term_binop','parser.py',53),
  ('term -> term DIVIDE factor','term',3,'p_term_binop','parser.py',54),
  ('term -> factor','term',1,'p_term_factor','parser.py',58),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_group','parser.py',62),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',66),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',70),
  ('expression -> expression GT expression','expression',3,'p_expression_gt','parser.py',74),
]
